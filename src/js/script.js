const MONTHS = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]; // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —à–∞–ø–∫–∏
const FULL_MONTHS = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]; // –ü–æ–ª–Ω—ã–µ –¥–ª—è –ø–æ–ø–∞–ø–æ–≤
const MOOD_COLORS = {
    'great': { label: '–ö–ª–∞—Å—Å–Ω—ã–π –¥–µ–Ω—å', color: '#1dd1a1' },
    'good': { label: '–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å', color: '#54a0ff' },
    'ok': { label: '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å', color: '#ffda79' },
    'sad': { label: '–ì—Ä—É—Å—Ç–Ω—ã–π –¥–µ–Ω—å', color: '#ffb142' },
    'angry': { label: '–ó–ª–æ–π –¥–µ–Ω—å', color: '#ff5252' },
    'awful': { label: '–û—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å', color: '#747d8c' },
    'tired': { label: '–£—Å—Ç–∞–ª—ã–π –¥–µ–Ω—å', color: '#9c88ff' },
    'sick': { label: '–ë–æ–ª–µ–∑–Ω—å', color: '#ff793f' },
};
const MOOD_ACTIVITY = {
    'alcohol': { emoji: 'üç∑' },
    'sport': { emoji: 'üí™üèª' },
    'sex': { emoji: 'üçì' },
    'friends': { emoji: 'ü§üüèª' },
    'romantic': { emoji: 'üíï' },
    'crying': { emoji: 'üò≠' },
    'WomanDay': { emoji: 'ü©∏' },
};

// --- DOM Elements ---
const calendarGrid = document.getElementById('calendarGrid');
const monthsHeader = document.getElementById('monthsHeader');
const daysAxis = document.getElementById('daysAxis');
const currentYearDisplay = document.getElementById('currentYearDisplay');
const prevYearBtn = document.getElementById('prevYearBtn');
const nextYearBtn = document.getElementById('nextYearBtn');
const editPopup = document.getElementById('editPopup');
const editPopupHeader = document.getElementById('editPopupHeader');
const popupColorsContainer = document.getElementById('popupColors');
const popupColorsDescr = document.getElementById('popupColorsDescr');
const dayDescriptionInput = document.getElementById('dayDescription');
const charCounter = document.getElementById('charCounter');
const saveDayBtn = document.getElementById('saveDayBtn');
const closeEditPopupBtn = document.getElementById('closeEditPopupBtn');
const cancelEditBtn = document.getElementById('cancelEditBtn');
const viewPopup = document.getElementById('viewPopup');
const viewPopupHeader = document.getElementById('viewPopupHeader');
const viewPopupColor = document.getElementById('viewPopupColor');
const viewPopupMood = document.getElementById('viewPopupMood');
const viewPopupDescription = document.getElementById('viewPopupDescription');
const editDayBtn = document.getElementById('editDayBtn');
const closeViewPopupBtn = document.getElementById('closeViewPopupBtn');
const cancelViewBtn = document.getElementById('cancelViewBtn');
const settingsButton = document.getElementById('settingsButton');
const settingsPanel = document.getElementById('settingsPanel');
const closeSettingsBtn = document.getElementById('closeSettingsBtn');
const themeOptions = document.getElementById('themeOptions');
const layoutOptions = document.getElementById('layoutOptions');

const editAlcoholCheckbox = document.getElementById('editAlcohol');
const editSportCheckbox = document.getElementById('editSport');
const editSexCheckbox = document.getElementById('editSex');
const editFriendsCheckbox = document.getElementById('editFriends');
const editRomanticCheckbox = document.getElementById('editRomantic');
const editCryingCheckbox = document.getElementById('editCrying');
const editWomanDayCheckbox = document.getElementById('editWomanDay');
const viewAlcoholCheckbox = document.getElementById('viewAlcohol');
const viewSportCheckbox = document.getElementById('viewSport');
const viewSexCheckbox = document.getElementById('viewSex');
const viewFriendsCheckbox = document.getElementById('viewFriends');
const viewRomanticCheckbox = document.getElementById('viewRomantic');
const viewCryingCheckbox = document.getElementById('viewCrying');
const viewWomanDayCheckbox = document.getElementById('viewWomanDay');

const legendContainer = document.getElementById('legend');

const appBody = document.body;
const appContainer = document.querySelector('.app');

// --- State ---
let currentYear = new Date().getFullYear();
const ACTUAL_CURRENT_YEAR = new Date().getFullYear();
let calendarData = {}; // { year: { month: { day: { color: 'mood_key', description: 'text' } } } }
let availableYearsData = []; // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç –∏–∑ API
let selectedDate = null; // YYYY-MM-DD
let selectedColorKey = null;
let currentUserId = null; // Telegram User ID
let isLoading = false; // –§–ª–∞–≥ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏

// --- Telegram WebApp ---
const tg = window.Telegram.WebApp;

// --- Utility Functions (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ) ---
const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();
const formatDate = (year, month, day) => `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
const parseDate = (dateString) => {
    const [year, month, day] = dateString.split('-').map(Number);
    return { year, month: month - 1, day }; // month is 0-indexed internally
};

// --- Loading Indicator ---
const showLoading = (show) => {
    isLoading = show;
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ body –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å spinner
    appBody.classList.toggle('app--loading', show);
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    prevYearBtn.disabled = show || (currentYear <= Math.min(...availableYearsData));
    nextYearBtn.disabled = show || (currentYear >= ACTUAL_CURRENT_YEAR);
    saveDayBtn.disabled = show;
    editDayBtn.disabled = show;
    // –ú–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ —è—á–µ–π–∫–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendarGrid.style.pointerEvents = show ? 'none' : 'auto';
};

// --- Data Handling (API) ---
const loadDataForYear = async(year, userId) => {
    if (!userId) {
        console.error("User ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
        showLoading(false);
        return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    showLoading(true);
    try {
        const response = await fetch(`${API_URL}?year=${year}&user_id=${userId}`, {
            method: 'GET',
            headers: { 'Accept': 'application/json' }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText} (—Å—Ç–∞—Ç—É—Å ${response.status})`);
        }

        const result = await response.json();

        if (!result.success) {
            throw new Error(`–û—à–∏–±–∫–∞ API: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ª–æ–∫–∞–ª—å–Ω–æ
        calendarData[year] = {}; // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        for (const [dateStr, dayData] of Object.entries(result.data || {})) {
            const { year: entryYear, month, day } = parseDate(dateStr);
            if (!calendarData[entryYear]) calendarData[entryYear] = {};
            if (!calendarData[entryYear][month + 1]) calendarData[entryYear][month + 1] = {};
            calendarData[entryYear][month + 1][day] = dayData; // Store all data
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç
        availableYearsData = result.availableYears || [];

        return true; // –£—Å–ø–µ—Ö

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        tg.showAlert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${error.message}`);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ–¥–∞ –ø—É—Å—Ç—ã–º–∏
        calendarData[year] = {};
        availableYearsData = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return false; // –û—à–∏–±–∫–∞
    } finally {
        showLoading(false);
    }
};

const saveEntry = async(entryData) => {
    if (!currentUserId) {
        console.error("User ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
        return false;
    }
    if (isLoading) return false; // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –¥—Ä—É–≥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

    showLoading(true);
    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({...entryData, user_id: currentUserId }) // –î–æ–±–∞–≤–ª—è–µ–º user_id
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText}`);
        }

        const result = await response.json();

        if (!result.success) {
            throw new Error(`–û—à–∏–±–∫–∞ API: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'}`);
        }

        console.log('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result.message);
        return true; // –£—Å–ø–µ—Ö

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        tg.showAlert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: ${error.message}`);
        return false; // –û—à–∏–±–∫–∞
    } finally {
        showLoading(false);
    }
};

// --- Settings (localStorage) ---
const loadSettings = () => {
    const savedTheme = localStorage.getItem('calendarTheme') || 'telegram';
    const savedLayout = localStorage.getItem('calendarLayout') || 'fill';
    applyTheme(savedTheme);
    applyLayout(savedLayout);
    const themeRadio = document.querySelector(`input[name="theme"][value="${savedTheme}"]`);
    const layoutRadio = document.querySelector(`input[name="layout"][value="${savedLayout}"]`);
    if (themeRadio) themeRadio.checked = true;
    if (layoutRadio) layoutRadio.checked = true;
};
const saveTheme = (theme) => localStorage.setItem('calendarTheme', theme);
const saveLayout = (layout) => localStorage.setItem('calendarLayout', layout);
const applyTheme = (themeName) => {

    if (themeName === 'telegram') {
        if (window.Telegram && Telegram.WebApp) {
            const theme = Telegram.WebApp.themeParams;
            document.documentElement.style.setProperty("--color-bg", theme.bg_color);
            document.documentElement.style.setProperty("--color-text", theme.text_color);
            document.documentElement.style.setProperty("--color-hint", theme.hint_color);
            document.documentElement.style.setProperty("--color-link", theme.link_color);
            document.documentElement.style.setProperty("--color-button-bg", theme.button_color);
            document.documentElement.style.setProperty("--color-button-text", theme.button_text_color);
            document.documentElement.style.setProperty("--color-secondary-bg", theme.secondary_bg_color);
            document.documentElement.style.setProperty("--color-header-bg", theme.secondary_bg_color);
            document.documentElement.style.setProperty("--color-bottom-bar-bg", theme.bottom_bar_bg_color);
            document.documentElement.style.setProperty("--color-accent-text", theme.accent_text_color);
            document.documentElement.style.setProperty("--color-section-bg", theme.section_bg_color);
            document.documentElement.style.setProperty("--color-section-header-text", theme.section_header_text_color);
            document.documentElement.style.setProperty("--color-section-separator", theme.section_separator_color);
            document.documentElement.style.setProperty("--color-subtitle-text", theme.subtitle_text_color);
            document.documentElement.style.setProperty("--color-settings-bg", theme.secondary_bg_color);
            document.documentElement.style.setProperty("--color-popup-bg", theme.bg_color);
            document.documentElement.style.setProperty("--color-day-bg", theme.secondary_bg_color);
            document.documentElement.style.setProperty("--color-border", theme.hint_color);
            document.documentElement.style.setProperty("--color-input-bg", theme.header_bg_color);
            document.documentElement.style.setProperty("--color-day-invalid-bg", theme.subtitle_text_color);


        }
    }
    appBody.dataset.theme = themeName;
    saveTheme(themeName);

};
const applyLayout = (layoutName) => {
    appBody.classList.remove('app--layout-full', 'app--layout-half', 'app--layout-compact', 'app--layout-fill');
    appBody.classList.add(`app--layout-${layoutName}`);
    saveLayout(layoutName);
    const daySize = layoutName === 'compact' ? '20px' : '25px';
    appContainer.style.setProperty('--day-size', daySize);
};

// --- Rendering ---
const renderCalendar = (year) => {
        calendarGrid.innerHTML = '';
        monthsHeader.innerHTML = '';
        daysAxis.innerHTML = '';
        currentYearDisplay.textContent = year + " –≥–æ–¥ –≤ –ø–∏–∫—Å–µ–ª—è—Ö";

        // –®–∞–ø–∫–∞ —Å –º–µ—Å—è—Ü–∞–º–∏
        MONTHS.forEach(month => {
            const monthEl = document.createElement('div');
            monthEl.classList.add('calendar__month');
            monthEl.textContent = month;
            monthEl.title = FULL_MONTHS[MONTHS.indexOf(month)];
            monthsHeader.appendChild(monthEl);
        });
        // –û—Å—å –¥–Ω–µ–π
        for (let day = 1; day <= 31; day++) {
            const dayNumEl = document.createElement('div');
            dayNumEl.classList.add('calendar__day-number');
            dayNumEl.textContent = day;
            daysAxis.appendChild(dayNumEl);
        }

        const yearData = calendarData[year] || {}; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
        const isCurrentActualYear = year === ACTUAL_CURRENT_YEAR;

        for (let day = 0; day < 31; day++) {
            for (let month = 0; month < 12; month++) {
                const dayCell = document.createElement('div');
                dayCell.classList.add('calendar__day');
                const dayOfMonth = day + 1;
                const daysInMonth = getDaysInMonth(year, month);

                if (dayOfMonth > daysInMonth) {
                    dayCell.classList.add('calendar__day--invalid');
                } else {
                    const dateStr = formatDate(year, month, dayOfMonth);
                    dayCell.dataset.date = dateStr;

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ calendarData
                    const monthData = yearData[month + 1] || {};
                    const dayData = monthData[dayOfMonth];

                    if (dayData && dayData.color) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ color
                        const moodInfo = MOOD_COLORS[dayData.color];
                        if (moodInfo) {
                            dayCell.style.backgroundColor = moodInfo.color;
                            //dayCell.title = `${moodInfo.label}${dayData.description ? ` - ${dayData.description.substring(0, 50)}...` : ''}`;
                            let titleText = `${moodInfo.label}${dayData.description ? ` - ${dayData.description.substring(0, 50)}...` : ''}`;
                            const activityEmojis = [];
                            if (Boolean(Number(dayData.alcohol))) activityEmojis.push(MOOD_ACTIVITY.alcohol.emoji);
                            if (Boolean(Number(dayData.sport))) activityEmojis.push(MOOD_ACTIVITY.sport.emoji);
                            if (Boolean(Number(dayData.sex))) activityEmojis.push(MOOD_ACTIVITY.sex.emoji);
                            if (Boolean(Number(dayData.friends))) activityEmojis.push(MOOD_ACTIVITY.friends.emoji);
                            if (Boolean(Number(dayData.romantic))) activityEmojis.push(MOOD_ACTIVITY.romantic.emoji);
                            if (Boolean(Number(dayData.crying))) activityEmojis.push(MOOD_ACTIVITY.crying.emoji);
                            if (Boolean(Number(dayData.WomanDay))) activityEmojis.push(MOOD_ACTIVITY.WomanDay.emoji);

                            if (activityEmojis.length > 0) {
                                titleText += ` ${activityEmojis.join('')}`;
                            }
                            dayCell.title = titleText;
                                dayCell.classList.add('calendar__day--filled');
                            } else {
                                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π mood_key '${dayData.color}' –¥–ª—è –¥–∞—Ç—ã ${dateStr}`);
                                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                            }
                        }

                        // –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                        if (dayData || isCurrentActualYear) { // –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ò–õ–ò —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                            dayCell.addEventListener('click', handleDayClick);
                            dayCell.style.cursor = 'pointer';
                        } else {
                             dayCell.style.cursor = 'default'; // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
                             dayCell.classList.add('calendar__day--past-empty');
                        }
                    }
                    calendarGrid.appendChild(dayCell);
                }
            }
             updateNavButtons(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
        };

        const renderColorOptions = () => {
            popupColorsContainer.innerHTML = '';
            Object.entries(MOOD_COLORS).forEach(([key, { label, color }]) => {
                 const colorOption = document.createElement('div');
                 colorOption.classList.add('popup__color-option');
                 colorOption.dataset.colorKey = key;
                 colorOption.style.backgroundColor = color;
                 colorOption.title = label;
                 colorOption.addEventListener('click', handleColorSelect);
                 popupColorsContainer.appendChild(colorOption);
            });
        };

        const updateNavButtons = () => {
             // –ò—Å–ø–æ–ª—å–∑—É–µ–º availableYearsData –∏–∑ API –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
             const minYear = availableYearsData.length > 0 ? Math.min(...availableYearsData) : currentYear;
             prevYearBtn.disabled = isLoading || currentYear <= minYear;
             nextYearBtn.disabled = isLoading || currentYear >= ACTUAL_CURRENT_YEAR;
        };

        const renderLegend = () => {
            legendContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            const legendList = document.createElement('ul'); // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–≥–µ–Ω–¥—ã
            legendList.classList.add('colorsLegend__list');

            Object.entries(MOOD_COLORS).forEach(([key, { label, color }]) => {
                const legendItem = document.createElement('li');
                legendItem.classList.add('colorsLegend__item');

                const colorBox = document.createElement('span');
                colorBox.classList.add('colorsLegend__color');
                colorBox.style.backgroundColor = color;

                const colorLabel = document.createElement('span');
                colorLabel.classList.add('colorsLegend__label');
                colorLabel.textContent = label;

                legendItem.appendChild(colorBox);
                legendItem.appendChild(colorLabel);
                legendList.appendChild(legendItem);
            });

            legendContainer.appendChild(legendList);
        };

        function showToast(message, duration = 2500) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç div –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const toast = document.createElement('div');
            toast.textContent = message;
          
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
            toast.style.position = 'fixed';
            toast.style.bottom = '20px';
            toast.style.left = '50%';
            toast.style.transform = 'translateX(-50%)';
            toast.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            toast.style.color = 'white';
            toast.style.padding = '10px 20px';
            toast.style.borderRadius = '5px';
            toast.style.zIndex = '1000'; // –ß—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            toast.style.opacity = '0';
            toast.style.transition = 'opacity 0.3s ease-in-out';
          
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
            document.body.appendChild(toast);
          
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
              toast.style.opacity = '1';
            }, 50);
          
            // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
              toast.style.opacity = '0';
              setTimeout(() => {
                document.body.removeChild(toast);
              }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
            }, duration);
          }

        // --- Event Handlers ---
        const handleDayClick = (event) => {
             if (isLoading) return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
             const dayCell = event.target.closest('.calendar__day'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —è—á–µ–π–∫–µ
             if (!dayCell || dayCell.classList.contains('calendar__day--invalid') || dayCell.classList.contains('calendar__day--past-empty')) {
                 return;
             }

            selectedDate = dayCell.dataset.date;
            if (!selectedDate) return;

            const { year, month, day } = parseDate(selectedDate);
            const isCurrentActualYear = year === ACTUAL_CURRENT_YEAR;

            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ calendarData
            const dayData = calendarData[year]?.[month + 1]?.[day];

            tg.HapticFeedback.selectionChanged();

            if (dayData) {
                 showViewPopup(selectedDate, dayData);
            } else if (isCurrentActualYear) { // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                 showEditPopup(selectedDate);
            }
        };

        const handleColorSelect = (event) => {
             const selectedOption = event.target;
             selectedColorKey = selectedOption.dataset.colorKey;
             document.querySelectorAll('.popup__color-option--selected').forEach(el => el.classList.remove('popup__color-option--selected'));
             selectedOption.classList.add('popup__color-option--selected');
             //popupColorsDescr.textContent = MOOD_COLORS[selectedColorKey].label;
             showToast(MOOD_COLORS[selectedColorKey].label);
             tg.HapticFeedback.selectionChanged();
        };

        const handleDescriptionInput = () => {
             const currentLength = dayDescriptionInput.value.length;
             charCounter.textContent = `${currentLength} / 300`;
        };

        const handleSaveDay = async () => {
            if (!selectedDate || !selectedColorKey) {
                tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.');
                return;
            }
            const description = dayDescriptionInput.value.trim();
            // Get the checkbox values
            const alcohol = editAlcoholCheckbox.checked;
            const sport = editSportCheckbox.checked;
            const sex = editSexCheckbox.checked;
            const friends = editFriendsCheckbox.checked;
            const romantic = editRomanticCheckbox.checked;
            const crying = editCryingCheckbox.checked;
            const WomanDay = editWomanDayCheckbox.checked;
            
            const entryData = {
                date: selectedDate,
                mood_key: selectedColorKey,
                description: description,
                alcohol: alcohol,
                sport: sport,
                sex: sex,
                friends: friends,
                romantic: romantic,
                crying: crying,
                WomanDay: WomanDay,
            };

            const success = await saveEntry(entryData);

            if (success) {
                hideEditPopup();
                tg.HapticFeedback.notificationOccurred('success');
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                await loadDataForYear(currentYear, currentUserId);
                renderCalendar(currentYear); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            } else {
                tg.HapticFeedback.notificationOccurred('warning');
                // –û—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ saveEntry
            }
        };

        const handleEditFromView = () => {
             if (!selectedDate) return;
             const { year, month, day } = parseDate(selectedDate);
             const dayData = calendarData[year]?.[month + 1]?.[day];
             if (year === ACTUAL_CURRENT_YEAR) { // –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                hideViewPopup();
                showEditPopup(selectedDate, dayData); // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                tg.HapticFeedback.impactOccurred("soft");
             } else {
                tg.showAlert("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞.");
             }
        };

        const handlePrevYear = async () => {
            if (isLoading) return;
            const minYear = availableYearsData.length > 0 ? Math.min(...availableYearsData) : currentYear -1; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥
            if (currentYear > minYear) {
                currentYear--;
                const success = await loadDataForYear(currentYear, currentUserId);
                if (success) {
                    renderCalendar(currentYear);
                    tg.HapticFeedback.impactOccurred("soft");
                } else {
                    // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ loadDataForYear, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –Ω–∞–∑–∞–¥
                    currentYear++;
                }
            }
        };

        const handleNextYear = async () => {
             if (isLoading) return;
             if (currentYear < ACTUAL_CURRENT_YEAR) {
                 currentYear++;
                 const success = await loadDataForYear(currentYear, currentUserId);
                 if (success) {
                    renderCalendar(currentYear);
                    tg.HapticFeedback.selectionChanged();
                 } else {
                    // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ loadDataForYear, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –Ω–∞–∑–∞–¥
                     currentYear--;
                 }
             }
        };

        // --- Handlers for Settings, Popups ---
         const handleSettingsToggle = () => settingsPanel.classList.toggle('settings--visible');
         const handleThemeChange = (event) => { if (event.target.type === 'radio') applyTheme(event.target.value); tg.HapticFeedback.impactOccurred("medium"); };
         const handleLayoutChange = (event) => { if (event.target.type === 'radio') applyLayout(event.target.value); tg.HapticFeedback.impactOccurred("medium"); };

        const showEditPopup = (dateStr, existingData = null) => {
            selectedDate = dateStr;
            const { year, month, day } = parseDate(dateStr);
            editPopupHeader.textContent = `–ó–∞–ø–∏—Å—å –∑–∞ ${day} ${FULL_MONTHS[month]} ${year}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            dayDescriptionInput.value = '';
            selectedColorKey = null;
            
            editAlcoholCheckbox.checked = false;
            editSportCheckbox.checked = false;
            editSexCheckbox.checked = false;
            editFriendsCheckbox.checked = false;
            editRomanticCheckbox.checked = false;
            editCryingCheckbox.checked = false;
            editWomanDayCheckbox.checked = false;

            document.querySelectorAll('.popup__color-option--selected').forEach(el => el.classList.remove('popup__color-option--selected'));
            if (existingData) {
                selectedColorKey = existingData.color;
                dayDescriptionInput.value = existingData.description || '';
                const colorOption = popupColorsContainer.querySelector(`[data-color-key="${selectedColorKey}"]`);
                if (colorOption) colorOption.classList.add('popup__color-option--selected');
   
                // Set checkboxes based on existing data
                editAlcoholCheckbox.checked = Boolean(Number(existingData.alcohol));
                editSportCheckbox.checked = Boolean(Number(existingData.sport));
                editSexCheckbox.checked = Boolean(Number(existingData.sex));
                editFriendsCheckbox.checked = Boolean(Number(existingData.friends));
                editRomanticCheckbox.checked = Boolean(Number(existingData.romantic));
                editCryingCheckbox.checked = Boolean(Number(existingData.crying));
                editWomanDayCheckbox.checked = Boolean(Number(existingData.WomanDay));
           }
            handleDescriptionInput();
            editPopup.classList.add('popup--visible');
            // dayDescriptionInput.focus();
        };
        const hideEditPopup = () => {
            editPopup.classList.remove('popup--visible');
            selectedDate = null; selectedColorKey = null;
        };
        const showViewPopup = (dateStr, dayData) => {
            selectedDate = dateStr;
            const { year, month, day } = parseDate(dateStr);
            const moodInfo = MOOD_COLORS[dayData.color];
            viewPopupHeader.textContent = `–ü—Ä–æ—Å–º–æ—Ç—Ä: ${day} ${FULL_MONTHS[month]} ${year}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            if (moodInfo) {
                viewPopupColor.style.backgroundColor = moodInfo.color;
                viewPopupMood.textContent = moodInfo.label;
            } else {
                viewPopupColor.style.backgroundColor = 'transparent';
                viewPopupMood.textContent = 'N/A';
            }
            viewPopupDescription.textContent = dayData.description || '(–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è)';
            
            // Set checkbox values in View Popup
            viewAlcoholCheckbox.checked = Boolean(Number(dayData.alcohol));
            viewSportCheckbox.checked = Boolean(Number(dayData.sport));
            viewSexCheckbox.checked = Boolean(Number(dayData.sex));
            viewFriendsCheckbox.checked = Boolean(Number(dayData.friends));
            viewRomanticCheckbox.checked = Boolean(Number(dayData.romantic));
            viewCryingCheckbox.checked = Boolean(Number(dayData.crying));
            viewWomanDayCheckbox.checked = Boolean(Number(dayData.WomanDay));

            editDayBtn.style.display = (year === ACTUAL_CURRENT_YEAR) ? 'inline-block' : 'none';
            viewPopup.classList.add('popup--visible');
        };
        const hideViewPopup = () => viewPopup.classList.remove('popup--visible');

        // --- Initialization ---
        const init = async () => {
             tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ WebApp –≥–æ—Ç–æ–≤–æ

             const userData = tg.initDataUnsafe?.user;

             tg.SettingsButton.show();
             tg.onEvent('settingsButtonClicked', handleSettingsToggle)

             if (!userData) {
                 console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram.");
                 // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                 // document.body.innerHTML = '<h1>–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.</h1>';
                 alert("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
                 return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
             }

             currentUserId = userData.id;
             console.log("Telegram User ID:", currentUserId, "–ò–º—è:", userData.first_name);

             loadSettings(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
             renderColorOptions(); // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
             renderLegend();

             // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
             const initialLoadSuccess = await loadDataForYear(currentYear, currentUserId);
             if (initialLoadSuccess) {
                renderCalendar(currentYear); // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
             } else {
                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                 renderCalendar(currentYear); // –†–µ–Ω–¥–µ—Ä–∏–º –ø—É—Å—Ç–æ–π, updateNavButtons –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç
             }

             // --- Event Listeners (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏) ---
             // –ö–ª–∏–∫–∏ –ø–æ —è—á–µ–π–∫–∞–º –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç—Å—è –≤ renderCalendar
             dayDescriptionInput.addEventListener('input', handleDescriptionInput);
             saveDayBtn.addEventListener('click', handleSaveDay);
             closeEditPopupBtn.addEventListener('click', hideEditPopup);
             cancelEditBtn.addEventListener('click', hideEditPopup);
             closeViewPopupBtn.addEventListener('click', hideViewPopup);
             cancelViewBtn.addEventListener('click', hideViewPopup);
             editDayBtn.addEventListener('click', handleEditFromView);
             prevYearBtn.addEventListener('click', handlePrevYear);
             nextYearBtn.addEventListener('click', handleNextYear);
             settingsButton.addEventListener('click', handleSettingsToggle);
             closeSettingsBtn.addEventListener('click', handleSettingsToggle);
             themeOptions.addEventListener('change', handleThemeChange);
             layoutOptions.addEventListener('change', handleLayoutChange);
             document.addEventListener('keydown', (e) => {
                if (isLoading) return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Esc –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                if (e.key === 'Escape') {
                    if (editPopup.classList.contains('popup--visible')) hideEditPopup();
                    else if (viewPopup.classList.contains('popup--visible')) hideViewPopup();
                    else if (settingsPanel.classList.contains('settings--visible')) handleSettingsToggle();
                }
             });
             [editPopup, viewPopup].forEach(popup => {
                popup.addEventListener('click', (e) => {
                    if (e.target === popup) {
                        if (popup === editPopup) hideEditPopup();
                        else if (popup === viewPopup) hideViewPopup();
                    }
                });
             });
        };

        // --- Start the application ---
        init(); // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é